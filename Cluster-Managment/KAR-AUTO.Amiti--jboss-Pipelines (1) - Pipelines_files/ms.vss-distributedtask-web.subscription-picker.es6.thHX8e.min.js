"use strict";define("DistributedTask/Subscriptions",["require","exports","react","VSSUI/Button","VSSUI/MessageBar","VSSUI/RadioButton","VSSUI/Spinner","VSSUI/Util","VSS/Core/Util/String","VSSUI/Dropdown","VSSUI/Utilities/DropdownSelection","VSS/Platform/Util/Url"],(function(i,t,s,e,r,o,n,c,a,u,p,d){var b,l,S,h;b=t.Resources={},t.Resources.NewAzureSubscription="New Azure subscription",t.Resources.NewAzureSubscriptionAriaLabel="Redirect to create a new azure subscription",t.Resources.NoAzureSubscriptionsMessage="You donâ€™t appear to have an active Azure subscription.",t.Resources.SubscriptionPickerTitle="Subscription",t.Resources.LoadingSubscriptions="Loading subscriptions ...",t.Resources.CannotSetOrganizationSubscription="Failed to set organization subscription.",t.Resources.FailedSetNoSubscriptionFound="The selected subscription was not found.",t.Resources.FailedSetSubscriptionInvalid="The selected subscription is not a valid subscription to be linked to the organization.",t.Resources.ValidatingSubscription="Validating subscription ...",t.Resources.WaitingToValidate="Waiting for subscription to validate ...",t.Resources.SubscriptionValid="Subscription is valid",t.Resources.SubscriptionInvalid="Subscription is not valid",t.Resources.SubscriptionCannotBeUsedForPurchases="This subscription cannot be used for purchases.",t.Resources.SubscriptionHasSpendingLimit="This subscription has a spending limit and cannot be used for purchases.",t.Resources.NeedsToBeAdminOrCoAdminOnSubscription="Requestor must be a service admin or service co-admin on the subscription which is required to be used for purchases",t.Resources.SubscriptionNotAvailableInRegion="This subscription is not valid for Azure DevOps organizations in this organization's current region.",t.Resources.SubscriptionNeedsCreditCard="This subscription cannot be used because it does not have a credit card on file.",t.Resources.SubscriptionNoLongerActive="This subscription is no longer active.",t.Resources.SubscriptionDeprecatedBilling="This subscription is on a deprecated billing system and cannot be used for purchases.",t.Resources.SubscriptionThroughCloudSolutionProvider="This subscription was created through the Cloud Solution Provider program and cannot be used for purchases.",t.Resources.SubscriptionTempSpendingLimit="This subscription has a temporary spending limit for this billing cycle. A subscription with a spending limit cannot be used for purchases.",function(i){l=t.ModelsSubscription={};t.ModelsSubscription.Subscription=class{constructor(i,t){this.internalSubscriptionAccount=i,this.internalHasBeenValidated=!!t}get id(){return this.subscriptionAccount.subscriptionId}get displayName(){return this.subscriptionAccount.subscriptionName}get isUsable(){return!this.hasBeenValidated||void 0===this.invalidReason}get hasBeenValidated(){return this.internalHasBeenValidated}get invalidReason(){switch(this.internalSubscriptionAccount.failedPurchaseReason){case 0:return;case 1:return b.SubscriptionHasSpendingLimit;case 3:case 10:return b.NeedsToBeAdminOrCoAdminOnSubscription;case 6:return b.SubscriptionNotAvailableInRegion;case 5:return b.SubscriptionNeedsCreditCard;case 8:return b.SubscriptionNoLongerActive;case 7:return b.SubscriptionDeprecatedBilling;case 11:return b.SubscriptionThroughCloudSolutionProvider;case 12:return b.SubscriptionTempSpendingLimit;default:return b.SubscriptionCannotBeUsedForPurchases}}get subscriptionAccount(){return Object.assign({},this.internalSubscriptionAccount)}}}(),function(i){S=t[i]={};class d extends s.Component{constructor(i,t){super(i,t),this.mounted=!1,this.onCreateSubscriptionButtonClick=()=>{const{createSubscriptionReplyTo:i,createSubscriptionReplyToQueryParams:t}=this.props,{redirectToCreateSubscription:s}=this.props.subscriptionContext.actions;s(i,t)},this.onChoiceGroupChange=async i=>{const{subscriptionIdToSubscription:t}=this.props.subscriptionContext.state;this.props.onSubscriptionChoiceChanged(t[i])},this._subscriptionDropdownSelection=new p.DropdownSelection,this.state={}}get selectedSubscriptionId(){const{selectedSubscriptionId:i,defaultOrganizationLinkedSubscription:t}=this.props,{organizationSubscription:s}=this.props.subscriptionContext.state;return i||(t&&s?s.id:"noneselected")}static getDerivedStateFromProps(i,t){const{selectedSubscriptionId:s,validateSubscriptionChoices:e}=i,{currentlySubscriptionId:r}=t;if(s!==r){return{currentlySubscriptionId:s,selectedSubscroptionIsValidPromise:e?d.getValidateSubscriptionPromise(i):void 0,selectedSubscriptionIsValid:void 0}}return null}static getValidateSubscriptionPromise(i){const{organizationSubscription:t}=i.subscriptionContext.state,{hostId:s,selectedSubscriptionId:e}=i,{validateSubscription:r}=i.subscriptionContext.actions;if(!e||t&&e===t.id)return Promise.resolve(!0);{const i=this.subscriptionIdToIsValidPromise[e]||r(e,s);return this.subscriptionIdToIsValidPromise[e]=i,i}}async componentDidUpdate(){if(this.props.useDropdown&&this.props.selectedSubscriptionId){const i=this._subscriptionDropdownSelection.value[0],t=i&&i.beginIndex,s=(this.props.subscriptionContext.state.subscriptions||[]).map((i=>i.id)).indexOf(this.props.selectedSubscriptionId);s!==t&&s>=0&&this._subscriptionDropdownSelection.select(s)}const{selectedSubscroptionIsValidPromise:i,currentlySubscriptionId:t}=this.state,{subscriptionIdToSubscription:s}=this.props.subscriptionContext.state;if(t&&i){this.setState({selectedSubscroptionIsValidPromise:void 0});const s=await i;this.props.onSubscriptionValidated&&this.props.onSubscriptionValidated(t,s),this.mounted&&this.setState((i=>i.currentlySubscriptionId===this.state.currentlySubscriptionId?{selectedSubscriptionIsValid:s}:null))}}componentDidMount(){this.mounted=!0,this.componentDidUpdate()}componentWillUnmount(){this.mounted=!1}render(){const{className:i}=this.props;return s.createElement("div",{className:(0,c.css)("flex-column flex-noshrink",i)},this.renderSubscriptionChoiceGroup(),this.renderCreateSubscriptionButton())}renderSubscriptionChoiceGroup(){const{loadedAllSubscriptions:i,subscriptions:t}=this.props.subscriptionContext.state,{label:e,titleClassName:r}=this.props;if(i&&t){if(0===t.length)return s.createElement("div",{className:(0,c.css)(this.props.useDropdown?"subscription-picker-dropdown-title bolt-formitem-label body-m":"bolt-formitem-label body-m",r)},b.NoAzureSubscriptionsMessage);{const{subscriptionIdToSubscription:i}=this.props.subscriptionContext.state;i[this.state.currentlySubscriptionId];return s.createElement(s.Fragment,null,s.createElement("div",{className:(0,c.css)(this.props.useDropdown?"subscription-picker-dropdown-title":"",r)},e||b.SubscriptionPickerTitle),this.props.useDropdown?s.createElement("div",{className:"subscription-picker-dropdown-holder"},s.createElement(u.Dropdown,{ariaLabel:e||b.SubscriptionPickerTitle,className:(0,c.css)("subscription-picker-dropdown",this.props.dropdownClassName),calloutContentClassName:(0,c.css)("subscription-picker-dropdown-callout",this.props.dropdownCalloutClassName),actions:[{text:b.NewAzureSubscription,ariaLabel:b.NewAzureSubscription,iconProps:{iconName:"Add"},onClick:this.onCreateSubscriptionButtonClick}],selection:this._subscriptionDropdownSelection,items:t.filter((i=>i.isUsable)).map((i=>{const t=(0,a.localeFormat)("{0} ({1})",i.displayName,i.id);return i&&{id:i.id,text:t,tooltipText:t,data:i}})),onSelect:(i,t)=>{this.props.onSubscriptionChoiceChanged(t.data)},filterThrottleWait:200})):s.createElement("div",{className:"flex-column flex-noshrink"},s.createElement("div",{className:"subscription-picker-choiceGroupContainer"},s.createElement(o.RadioButtonGroup,{selectedButtonId:this.selectedSubscriptionId,onSelect:this.onChoiceGroupChange},t.map((i=>{const{id:t,isUsable:e,displayName:r}=i,n=`subscription-picker-${t}`;return s.createElement(o.RadioButton,{className:"subscription-picker-radiobutton body-m",id:t,key:`radioButton-${t}-key`,ariaLabelledBy:n,disabled:!e||this.props.disabled},s.createElement("div",{className:"bolt-radio-button-label subscription-picker-radiobutton-section",id:n},r,s.createElement("span",{className:"subscription-picker-radiobuttonsublabel body-s"},t)))})))),this.renderValidationMessageBar()))}}return s.createElement("div",{className:"subscription-picker-spinner"},s.createElement(n.Spinner,{ariaLive:"assertive",label:b.LoadingSubscriptions,size:"medium"}))}renderValidationMessageBar(){const{validateSubscriptionChoices:i}=this.props,{selectedSubscriptionIsValid:t}=this.state,{subscriptionIdToSubscription:e}=this.props.subscriptionContext.state;if(!i)return null;const o=this.selectedSubscriptionId&&e?e[this.selectedSubscriptionId]:void 0,n={};let c=!1,a="";return o?void 0===t?(c=!0,n.severity="Info",a=b.ValidatingSubscription):t?(n.severity="Success",a=b.SubscriptionValid):(n.severity="Error",a=b.SubscriptionInvalid+". "+o.invalidReason):(n.severity="Info",a=b.WaitingToValidate),s.createElement("div",{className:"subscription-picker-messageBarContainer"},s.createElement(r.MessageBar,Object.assign({},n),this.renderMessageBarContent(a,c)))}renderMessageBarContent(i,t){return s.createElement("div",{className:"subscription-picker-messageBarContent flex-row flex-noshrink"},t&&s.createElement(n.Spinner,{ariaLive:"assertive",label:i,size:"small"}))}renderCreateSubscriptionButton(){if(!this.props.showCreateButtonForNoSubscriptions&&!this.props.showCreateSubscriptionButton)return;const{loadedAllSubscriptions:i,subscriptions:t}=this.props.subscriptionContext.state;return!this.props.showCreateButtonForNoSubscriptions||i&&t&&t.length?s.createElement("div",{className:"subscription-picker-create-button-container"},s.createElement(e.Button,{primary:!0,ariaLabel:b.NewAzureSubscriptionAriaLabel,text:b.NewAzureSubscription,onClick:this.onCreateSubscriptionButtonClick,iconProps:{iconName:"Add"}})):void 0}}t[i].SubscriptionPicker=d,d.subscriptionIdToIsValidPromise={}}("ComponentsSubscriptionPicker"),function(i){h=t[i]={};const e=s.createContext(void 0);class r extends s.Component{constructor(i){super(i),this.getInitPromise=async()=>({allSubscriptions:await this.getSubscriptions(),organizationSubscription:await this.getOrganizationSubscription()}),this.validateSubscription=async(i,t)=>{const s=await this.props.validateSubscription(i,t);return!!s&&(this.setState((t=>{if(t.subscriptions){return{subscriptions:[].concat(t.subscriptions.map((t=>t.id===i&&s?new l.Subscription(Object.assign(Object.assign({},t.subscriptionAccount),{failedPurchaseReason:s.failedPurchaseReason}),!0):t)))}}return{}})),new l.Subscription(s,!0).isUsable)},this.getSubscriptions=async()=>(await this.props.getSubscriptions()).map((i=>new l.Subscription(i))),this.getOrganizationSubscription=async()=>{const i=await this.props.getOrganizationSubscription();if(i)return new l.Subscription(i)},this.state={loadedAllSubscriptions:!1},this.initPromise=this.getInitPromise()}static subscriptionsToDictionary(i=[]){const t={};return i.forEach((i=>t[i.id]=i)),t}async componentDidMount(){this.mounted=!0;const i=await this.initPromise;this.mounted&&this.setState({subscriptions:i.allSubscriptions,organizationSubscription:i.organizationSubscription,loadedAllSubscriptions:!0})}componentWillUnmount(){this.mounted=!1}render(){const{redirectToCreateSubscription:i}=this.props;return s.createElement(e.Provider,{value:{actions:{redirectToCreateSubscription:i,validateSubscription:this.validateSubscription},state:Object.assign(Object.assign({},this.state),{subscriptionIdToSubscription:r.subscriptionsToDictionary(this.state.subscriptions)})}},this.props.children)}}class o extends s.Component{constructor(i){super(i),this.validateSubscription=async(i,t)=>{const s=t||this.pageData&&this.pageData.hostId,e=this.props.pageContext.getService("IVssContributionService");await new Promise((i=>setTimeout(i,3e3)));return await e.getDataAsync("ms.vss-distributedtask-web.dt-validate-subscription-data-provider",{orgId:s,subscriptionId:i},!0)},this.getOrganizationSubscription=async i=>{const t=i||this.pageData&&this.pageData.hostId;return this.props.pageContext.getService("IVssContributionService").getDataAsync("ms.vss-distributedtask-web.dt-get-host-subscription-data-provider",{orgId:t},!0)},this.getSubscriptions=async()=>{const i=this.props.pageContext.getService("IVssContributionService");let t=await i.getDataAsync("ms.vss-distributedtask-web.dt-get-subscriptions-data-provider",{},!0);return t&&(t=t.sort(((i,t)=>i.subscriptionName>t.subscriptionName?1:-1))),t||[]},this.pageData=i.pageContext.getService("IVssPageService").getData()}render(){return s.createElement(r,Object.assign({},this.props,{getSubscriptions:this.getSubscriptions,getOrganizationSubscription:this.getOrganizationSubscription,redirectToCreateSubscription:this.redirectToCreateSubscription,validateSubscription:this.validateSubscription}))}redirectToCreateSubscription(i,t={}){const s=new d.Uri(i||window.location.href);i||s.addQueryParams(t);const e=new d.Uri("https://account-staging.azure.com/signup");e.addQueryParam("appId","101",!0),e.addQueryParam("offer","MS-AZR-0003P",!0),e.addQueryParam("recommend","0",!0),e.addQueryParam("noPrompt","true",!0),e.addQueryParam("redirectURL",encodeURI(s.absoluteUri),!0),window.location.href=e.absoluteUri}}t[i].SubscriptionProvider=o,t[i].SubscriptionConsumer=e.Consumer}("ContextsSubscriptionContext"),t.SubscriptionPicker={},Object.defineProperty(t.SubscriptionPicker,"SubscriptionPicker",{enumerable:!0,get:function(){return S.SubscriptionPicker}}),__exportStar(l,t.SubscriptionPicker),__exportStar(h,t.SubscriptionPicker)}),["Resources","Models/Subscription","Components/SubscriptionPicker","Contexts/SubscriptionContext","SubscriptionPicker"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-distributedtask-web.subscription-picker"}}));