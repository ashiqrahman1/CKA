"use strict";define("Build/SourceProviders",["require","exports","VSS/Core/Util/String","VSS/Platform/Trace","VSS/Platform/UserClaims","VSS/Platform/Context"],(function(e,t,r,i,n,o){var s,a,c,m,u,l,h,g,p,y,f,k,C,N,_;s=t.Resources={},t.Resources.Bitbucket="Bitbucket",t.Resources.ExternalGit="External Git",t.Resources.GitHub="GitHub",t.Resources.GitHubEnterprise="GitHub Enterprise",t.Resources.Svn="SVN",t.Resources.TfsGit="Azure Repos",t.Resources.TfsVersionControl="Team Foundation Version Control",t.Resources.ExternalUnknown="External Unknown",t.Resources.CommitId="commit {0}",a=t.Common={},(_=t.Common.RepositoryTypes||(t.Common.RepositoryTypes={})).TfsVersionControl="TfsVersionControl".toLowerCase(),_.TfsGit="TfsGit".toLowerCase(),_.ExternalUnknown="ExternalUnknown".toLowerCase(),_.ExternalGit="Git".toLowerCase(),_.GitHub="GitHub".toLowerCase(),_.GitHubEnterprise="GitHubEnterprise".toLowerCase(),_.Bitbucket="Bitbucket".toLowerCase(),_.Svn="Svn".toLowerCase(),function(e){c=t.Base={};t.Base.Base=class{constructor(e){this.pageContext=e,this.emptyNullPromise=Promise.resolve(null)}getName(){return""}getRepoIconName(){return""}getNormalizedBranch(e,t){return e}getNormalizedCommit(e){return e}getCommitIconName(){return"BranchCommit"}getProjectName(e){return this.emptyNullPromise}fetchBranchLink(e,t){return this.emptyNullPromise}fetchContentLinks(e){return this.emptyNullPromise}fetchContentLink(e){return this.emptyNullPromise}fetchRepositoryLink(e,t){return this.emptyNullPromise}fetchPRCommitLink(e,t){return this.emptyNullPromise}fetchCommitDiffLink(e,t){return this.emptyNullPromise}fetchLinks(e){return this.vcNavigationService.then((t=>{let r=[];return(e||[]).forEach((e=>{r.push({originalId:e.commitId,commitId:this.getCommitText(e.commitId),branchLink:this._getBranchLink({branchName:e.branchName,links:e.links,repositoryName:e.repositoryName,repositoryUrl:e.repositoryUrl},t,e.projectName),commitLink:this._getCommitLink({commitId:e.commitId,displayUri:e.displayUri,repositoryName:e.repositoryName},t,e.projectName),repositoryLink:this._getRepositoryLink({repositoryName:e.repositoryName,repositoryUrl:e.repositoryUrl},t,e.projectName)})})),r}))}fetchPullrequestData(e){return this.emptyNullPromise}getBranchText(e){return e}getBranchIconName(e){return"OpenSource"}fetchCommitLink(e,t){return this.emptyNullPromise}getCommitText(e){return e||""}getMaxWorkItems(){}fetchShelvesets(e){return Promise.resolve([])}get vcNavigationService(){return this._vcNavigationService||(this._vcNavigationService=this.getVcCode().then((()=>this.pageContext.getService("IVCNavigationService")))),this._vcNavigationService}getVcCode(){if(!this._vcContributionPromise){const e=this.pageContext.getService("IVssContributionService");this._vcContributionPromise=e.getContributionAsync("ms.vss-code-web.common-content")}return this._vcContributionPromise}_getBuildClient(){return this._buildClient||(this._buildClient=this.pageContext.getRestClient("IBuildRestClient")),this._buildClient}_getBranchLink(e,t,r){return""}_getCommitLink(e,t,r){return""}_getRepositoryLink(e,t,r){return""}}}(),m=t.Constants={},t.Constants.ShortenedCommitHashLength=8,function(e){u=t.BaseGit={};class i extends c.Base{getRepoIconName(){return"ExternalGit"}getBranchText(e){const t=this._normalizeBranchName(e);if((0,r.startsWith)(t,"refs/pull/")){const e=this._getPullRequestId(t);if(e)return e.toString()}return t}getBranchIconName(e){return(0,r.startsWith)(e,"refs/pull/")||(0,r.startsWith)(e,"refs/heads/refs/pull/")?"BranchPullRequest":(0,r.startsWith)(e,"refs/tags")?"Tag":super.getBranchIconName(e)}getCommitText(e){return e?e.slice(0,m.ShortenedCommitHashLength):""}fetchPullrequestData(e){if(e.pullRequestNumber)return this._queryPullRequest(e,e.pullRequestNumber);const t=this._getPullRequestId(e.branchName);return void 0!==t?this._queryPullRequest(e,t.toString()):Promise.resolve(null)}_getPullRequestId(e){if(0===(e=this._normalizeBranchName(e||"")).indexOf("refs/pull/")){const t=e.substring("refs/pull/".length).trim().split("/",2);if(2!==t.length)return;if("merge"!==t[1].trim().toLowerCase())return;const r=parseInt(t[0].trim());if(!isNaN(r))return r}}_normalizeBranchName(e){return(0,r.startsWith)(e,"refs/heads/")?e.substring("refs/heads/".length):(0,r.startsWith)(e,"refs/tags/")?e.substring("refs/tags/".length):e}_queryPullRequest(e,t){return this._getBuildClient().getPullRequest(e.projectId,this.getKey(),t,e.repositoryName,e.serviceEndpointId).then((e=>({id:parseInt(e.id,10),title:e.title,sourceRepositoryOwner:e.sourceRepositoryOwner,sourceBranch:this.getBranchText(e.sourceBranchRef),targetRepositoryOwner:e.targetRepositoryOwner,targetBranch:this.getBranchText(e.targetBranchRef),rawSourceBranch:e.sourceBranchRef,rawTargetBranch:e.targetBranchRef,url:e._links.web.href})))}}t.BaseGit.BaseGit=i}(),function(e){l=t.ExternalUnknown={};class r extends c.Base{getKey(){return a.RepositoryTypes.ExternalUnknown}getName(){return s.ExternalUnknown}fetchBranchLink(e){return Promise.resolve(this._getBranchLink(e))}fetchCommitLink(e){return Promise.resolve(this._getCommitLink(e))}getBranchLink(e){return this._getBranchLink(e)}getCommitLink(e){return this._getCommitLink(e)}_getBranchLink(e,t){if(e.links){const t=e.links.sourceVersionDisplayUri;if(t&&t.href)return t.href}return""}_getCommitLink(e,t){return e.displayUri?e.displayUri:""}}t.ExternalUnknown.ExternalUnknown=r}(),h=t.TraceNames={},t.TraceNames.area="vss-build-web.common.sourceproviders",function(e){g=t.Bitbucket={};class r extends u.BaseGit{constructor(e){super(e),this._externalRepo=new l.ExternalUnknown(e)}getKey(){return a.RepositoryTypes.Bitbucket}getName(){return s.Bitbucket}getRepoIconName(){return"BitbucketLogo32"}fetchRepositoryLink(e,t){return Promise.resolve(this._getRepositoryLinkInternal(e.repositoryName))}fetchBranchLink(e,t){return Promise.resolve(this._getBranchLinkInternal(e))}fetchCommitLink(e,t){return Promise.resolve(this._getCommitLinkInternal(e))}_getRepositoryLink(e,t){return this._getRepositoryLinkInternal(e.repositoryName)}_getBranchLink(e,t){return this._getBranchLinkInternal(e)}_getCommitLink(e,t){return this._externalRepo.getCommitLink(e)}_getRepositoryLinkInternal(e){if(!e)return console.error("Name is required to create a link to the repository"),"";e.indexOf("bitbucket.org")>0&&(0,i.traceWarning)(this.pageContext,h.area,"Bitbucket","Data shape issue: repositoryName may be a URL");const t=e.split("/",3);return 2===t.length&&t[0]&&t[1]?`${r.s_BitbucketPrefix}/${e}`:(console.error(`Repository name "${e}" is not in the expected format ("user/repository")`),"")}_getBranchLinkInternal(e){if(e.repositoryName&&e.branchName){const t=this._normalizeBranchName(e.branchName);return`${this._getRepositoryLinkInternal(e.repositoryName)}/branch/${t}`}return this._externalRepo.getBranchLink(e)}_getCommitLinkInternal(e){return e.repositoryName&&e.commitId?`${this._getRepositoryLinkInternal(e.repositoryName)}/commits/${e.commitId}`:this._externalRepo.fetchCommitLink(e)}}t.Bitbucket.Bitbucket=r,r.s_BitbucketPrefix="https://bitbucket.org"}(),function(e){p=t.ExternalGit={};class r extends u.BaseGit{getKey(){return a.RepositoryTypes.ExternalGit}getName(){return s.ExternalGit}fetchRepositoryLink(e,t){return Promise.resolve(this._getRepositoryLinkInternal(e.repositoryId))}_getRepositoryLink(e,t){return this._getRepositoryLinkInternal(e.repositoryId)}_getRepositoryLinkInternal(e){return e||""}}t.ExternalGit.ExternalGit=r}(),function(e){y=t.GitHub={};class r extends u.BaseGit{constructor(e){super(e),this._externalRepo=new l.ExternalUnknown(e)}getKey(){return a.RepositoryTypes.GitHub}getName(){return s.GitHub}fetchBranchLink(e,t){return Promise.resolve(this._getBranchLinkInternal(e))}fetchCommitLink(e,t){return Promise.resolve(this._getCommitLinkInternal(e))}fetchRepositoryLink(e,t){return Promise.resolve(this._getRepositoryUrl(e.repositoryName))}fetchPRCommitLink(e,t){if(e.repositoryName&&e.branchName){const t=this._getPullRequestId(e.branchName);if(t)return Promise.resolve(`${this._getPullRequestUrl(t,e.repositoryName)}/commits`)}return this.emptyNullPromise}fetchCommitDiffLink(e,t){let r="";return e.repositoryName&&e.baseCommitId&&e.targetCommitId&&(r=`${this._getRepositoryUrl(e.repositoryName)}/compare/${e.baseCommitId}...${e.targetCommitId}`),Promise.resolve(r)}getRepoIconName(){return"GitHubLogo"}getMaxWorkItems(){return 10}_getBranchLink(e,t){return this._getBranchLinkInternal(e)}_getRepositoryLink(e,t){return this._getRepositoryUrl(e.repositoryName)}_getCommitLink(e,t){return this._getCommitLinkInternal(e)}_getBranchLinkInternal(e){if(e.repositoryName&&e.branchName){const t=this._getPullRequestId(e.branchName);if(t)return this._getPullRequestUrl(t,e.repositoryName);const r=this._normalizeBranchName(e.branchName);return`${this._getRepositoryUrl(e.repositoryName)}/tree/${r}`}return this._externalRepo.getBranchLink(e)}_getPullRequestUrl(e,t){return`${this._getRepositoryUrl(t)}/pull/${e}`}_getCommitLinkInternal(e){return e.repositoryName&&e.commitId?`${this._getRepositoryUrl(e.repositoryName)}/commit/${e.commitId}`:this._externalRepo.getCommitLink(e)}_getRepositoryUrl(e){if(!e)return console.error("Name is required to create a link to the repository"),"";if(e.startsWith(r.s_GitHubPrefix))return(0,i.traceWarning)(this.pageContext,h.area,"GitHub","Data shape issue: repositoryName may be a URL"),e.replace(/\.git$/g,"");const t=e.split("/",3);return 2===t.length&&t[0]&&t[1]?`${r.s_GitHubPrefix}/${e}`:(console.error(`Repository name "${e}" is not in the expected format ("user/repository")`),"")}}t.GitHub.GitHub=r,r.s_GitHubPrefix="https://github.com"}(),function(e){f=t.GitHubEnterprise={};class r extends u.BaseGit{constructor(e){super(e),this._externalRepo=new l.ExternalUnknown(e)}getKey(){return a.RepositoryTypes.GitHubEnterprise}getName(){return s.GitHubEnterprise}fetchBranchLink(e){return this._externalRepo.fetchBranchLink(e)}fetchCommitLink(e){return this._externalRepo.fetchCommitLink(e)}fetchRepositoryLink(e,t){return Promise.resolve(this._getRepoUrl(e.repositoryUrl))}_getBranchLink(e,t){const r=this._getRepoUrl(e.repositoryUrl);if(r&&e.branchName){return`${r}/tree/${this._normalizeBranchName(e.branchName)}`}return this._externalRepo.getBranchLink(e)}_getRepositoryLink(e,t){return this._getRepoUrl(e.repositoryUrl)}_getCommitLink(e,t){return this._externalRepo.getCommitLink(e)}getRepoIconName(){return"GitHubLogo"}getMaxWorkItems(){return 10}_getRepoUrl(e){return e?e.endsWith(".git")?e.slice(0,e.length-4):e:""}}t.GitHubEnterprise.GitHubEnterprise=r}(),function(e){k=t.TfsGit={};class i extends u.BaseGit{constructor(){super(...arguments),this.knownRepositories={}}getKey(){return a.RepositoryTypes.TfsGit}getName(){return s.TfsGit}getRepoIconName(){return"GitLogo"}fetchBranchLink(e,t){return this.vcNavigationService.then((r=>this._getBranchLink(e,r,t)))}fetchCommitLink(e,t){return this.vcNavigationService.then((r=>r.getGitCommitUrl(e.commitId,e.repositoryName||"",t)))}fetchPRCommitLink(e,t){if(e.repositoryName&&e.branchName){const r=this._getPullRequestId(e.branchName);if(r)return this.vcNavigationService.then((i=>`${i.getPullRequestUrl(r,e.repositoryName,t)}?_a=commits`))}return this.emptyNullPromise}fetchCommitDiffLink(e,t){return this.vcNavigationService.then((r=>r.getGitCompareCommitsUrl(e.baseCommitId,e.targetCommitId,e.repositoryName||"",t)))}fetchContentLinks(e){return this.vcNavigationService.then((t=>{const r=[];return(e||[]).forEach((e=>{const i=this._getContentLink(e,t);i&&r.push({id:e.id,link:i})})),r}))}fetchContentLink(e){return e.repositoryName?this.vcNavigationService.then((t=>this._getContentLink(e,t))):this.emptyNullPromise}fetchRepositoryLink(e,t){return e.repositoryName?this.vcNavigationService.then((r=>this._getRepositoryLink(e,r,t))):this.emptyNullPromise}getProjectName(e){return(0,n.userHasClaim)(this.pageContext,"member")?(this.knownRepositories[e]||(this.knownRepositories[e]=this.gitClient.then((t=>t.getRepository(e)))),this.knownRepositories[e].then((e=>e.project&&e.project.name),(()=>null))):Promise.resolve("")}get gitClient(){return this._gitClient||(this._gitClient=this.getVcCode().then((()=>this.pageContext.getRestClient("IGitRestClient")))),this._gitClient}_getBranchLink(e,t,r){const i=this._getPullRequestId(e.branchName);return i?t.getPullRequestUrl(i,e.repositoryName,r):t.getRefUrl(e.branchName,e.repositoryName,r)}_getCommitLink(e,t,r){return t.getGitCommitUrl(e.commitId,e.repositoryName||"",r)}_getRepositoryLink(e,t,r){return t.getRepositoryUrl(e.repositoryName,r)}_getContentLink(e,t){let r="plain";e.isError&&(r="error");return t.getRepositoryUrl(e.repositoryName,void 0,void 0,void 0,{line:e.lineNumber,lineStyle:r,lineTooltip:e.lineTooltip,version:this._getGitVersionSpec(e.version),path:e.path,_a:"contents"})}_getGitVersionSpec(e){return(0,r.startsWith)(e,"GC")||(e="GC"+e),e}}t.TfsGit.TfsGit=i}(),function(e){C=t.Svn={};class i extends c.Base{getKey(){return a.RepositoryTypes.Svn}getName(){return s.Svn}getRepoIconName(){return"SVNLogo"}getChangeText(e){return e&&e.id?(0,r.format)(s.CommitId,e.id.slice(0,7)):""}}t.Svn.Svn=i}(),function(e){N=t.TfsVersionControl={};class i extends c.Base{getKey(){return a.RepositoryTypes.TfsVersionControl}getName(){return s.TfsVersionControl}getCommitIconName(){return"DocumentSet"}getRepoIconName(){return"TFVCLogo"}getNormalizedBranch(e,t){return(e=e||"").replace(t.id,t.name)}getNormalizedCommit(e){return e&&!isNaN(parseInt(e))&&(e="C"+e),e}fetchBranchLink(e,t){return this.vcNavigationService.then((r=>this._getBranchLink(e,r,t)))}fetchCommitLink(e,t){return this.vcNavigationService.then((r=>this._getCommitLink(e,r,t)))}fetchRepositoryLink(e,t){return this.vcNavigationService.then((r=>this._getRepositoryLink(e,r,t)))}_getBranchLink(e,t,n){const o=e.branchName;return(0,r.startsWith)(o,i.s_tfvcPrefix)?t.getRefUrl(e.branchName,null,n):t.getTfvcCommitUrl(e.branchName)}_getCommitLink(e,t,r){return t.getTfvcCommitUrl(this.getNormalizedCommit(e.commitId),r)}_getRepositoryLink(e,t,r){return t.getRepositoryUrl(null,r)}get tfvcClient(){return this._tfvcClient||(this._tfvcClient=this.getVcCode().then((()=>this.pageContext.getRestClient("ITfvcRestClient")))),this._tfvcClient}fetchShelvesets(e){const t={owner:e};return this.tfvcClient.then((e=>e.getShelvesets(t).then((e=>e))))}}t.TfsVersionControl.TfsVersionControl=i,i.s_tfvcPrefix="$/"}(),function(e){t.SourceProvider={};class r extends o.VssService{constructor(){super(...arguments),this._sourceProviders={}}_serviceStart(e){super._serviceStart(e);[new g.Bitbucket(e),new p.ExternalGit(e),new y.GitHub(e),new f.GitHubEnterprise(e),new C.Svn(e),new k.TfsGit(e),new N.TfsVersionControl(e),new l.ExternalUnknown(e)].forEach((e=>{this._sourceProviders[e.getKey()]=e}))}getSourceProvider(e){e=(e=e||"").toLocaleLowerCase();const t=this._sourceProviders[e];return t||(console.warn("Provider with type "+e+" is not initialized, fetching a generic external provider"),this._sourceProviders[a.RepositoryTypes.ExternalUnknown])}}t.SourceProvider.SourceProviderService=r,o.Services.add("ISourceProviderService",{serviceFactory:r})}()}),["Resources","Common","Base","Constants","BaseGit","ExternalUnknown","TraceNames","Bitbucket","ExternalGit","GitHub","GitHubEnterprise","TfsGit","Svn","TfsVersionControl","SourceProvider"]),document.dispatchEvent(new CustomEvent("scriptLoaded",{cancelable:!1,detail:{id:"ms.vss-build-web.sourceproviders"}}));